generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String    @unique
  username    String    @unique
  password    String
  avatarUrl   String?
  role        String    @default("user")
  status      String    @default("active")
  isVerified  Boolean   @default(false)
  joinDate    DateTime  @default(now())
  lastLogin   DateTime?
  bio         String?
  followers   Int       @default(0)
  following   Int       @default(0)
  totalLikes  Int       @default(0)
  videos      Video[]
  comments    Comment[]
  liveStreams LiveStream[]
}

model Video {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  description   String
  videoSources  VideoSource[]
  thumbnailUrl  String?
  uploadDate    DateTime      @default(now())
  status        String        @default("pending") // pending, approved, removed
  author        User          @relation(fields: [authorId], references: [id])
  authorId      String        @db.ObjectId
  comments      Comment[]
  likes         Int           @default(0)
  shares        Int           @default(0)
  views         Int           @default(0)
}

model VideoSource {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  quality String
  url     String
  Video   Video? @relation(fields: [videoId], references: [id])
  videoId String? @db.ObjectId
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String   @db.ObjectId
  Video     Video?   @relation(fields: [videoId], references: [id])
  videoId   String?  @db.ObjectId
}

model LiveStream {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  thumbnailUrl String?
  status       String   @default("pending") // pending, live, finished
  startTime    DateTime @default(now())
  endTime      DateTime?
  user         User     @relation(fields: [userId], references: [id])
  userId       String   @db.ObjectId
  videoUrl     String?
}
